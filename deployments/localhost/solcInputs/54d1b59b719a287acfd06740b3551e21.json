{
  "language": "Solidity",
  "sources": {
    "contracts/DomainMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract DomainMarketplace {\n    struct Domain {\n        string name;\n        uint256 price;\n        address owner;\n        bool forSale;\n    }\n\n    mapping(string => Domain) public domains;\n\n    function listDomain(string memory name, uint256 price) public {\n        require(price > 0, \"Price must be greater than zero\");\n        domains[name] = Domain(name, price, msg.sender, true);\n    }\n\n    function buyDomain(string memory name) public payable {\n        Domain storage domain = domains[name];\n        require(domain.forSale, \"Domain not for sale\");\n        require(msg.value >= domain.price, \"Insufficient payment\");\n\n        address payable seller = payable(domain.owner);\n        seller.transfer(msg.value);\n\n        domain.owner = msg.sender;\n        domain.forSale = false;\n    }\n\n    function getDomain(string memory name) public view returns (Domain memory) {\n        return domains[name];\n    }\n}\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}